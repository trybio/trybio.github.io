<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Linux常用服务器构建-ssh和scp</title>
      <link href="/2019/01/22/linux-chang-yong-fu-wu-qi-gou-jian-ssh-he-scp/"/>
      <url>/2019/01/22/linux-chang-yong-fu-wu-qi-gou-jian-ssh-he-scp/</url>
      
        <content type="html"><![CDATA[<h3 id="1-ssh"><a href="#1-ssh" class="headerlink" title="1.ssh"></a>1.ssh</h3><h5 id="ssh介绍"><a href="#ssh介绍" class="headerlink" title="ssh介绍"></a><1>ssh介绍</1></h5><p>SSH为Secure Shell的缩写，由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。</p><p>SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。常用于远程登录，以及用户之间进行资料拷贝。</p><p>利用SSH协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是 UNIX 系统上的一个程序，后来又迅速扩展到其他操作平台。SSH 在正确使用时可弥补网络中的漏洞。SSH 客户端适用于多种平台。几乎所有 UNIX 平台—包括 HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。</p><p>使用SSH服务，需要安装相应的服务器和客户端。客户端和服务器的关系：如果，A机器想被B机器远程控制，那么，A机器需要安装SSH服务器，B机器需要安装SSH客户端。</p><h5 id="安装ssh"><a href="#安装ssh" class="headerlink" title="安装ssh"></a><2>安装ssh</2></h5><p>A.安装ssh服务器</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server</code></pre><p>B.远程登陆</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> 用户名@IP</code></pre><p>使用ssh访问，如访问出现错误。可查看是否有该文件 ～/.ssh/known_ssh 尝试删除该文件解决。</p><h5 id="使用ssh连接服务器"><a href="#使用ssh连接服务器" class="headerlink" title="使用ssh连接服务器"></a><3>使用ssh连接服务器</3></h5><p>SSH 告知用户，这个主机不能识别，这时键入”yes”，SSH 就会将相关信息，写入” ~/.ssh/know_hosts” 中，再次访问，就不会有这些信息了。然后输入完口令,就可以登录到主机了。</p><h4 id="2-scp"><a href="#2-scp" class="headerlink" title="2.scp"></a>2.scp</h4><p>远程拷贝文件,scp -r 的常用方法：</p><p>1.使用该命令的前提条件要求目标主机已经成功安装openssh-server</p><pre class=" language-bash"><code class="language-bash">如没有安装使用 <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server 来安装</code></pre><p>2.使用格式：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -r 目标用户名@目标主机IP地址：/目标文件的绝对路径  /保存到本机的绝对/相对路径举例：<span class="token function">scp</span> -r itcast@192.168.1.100:/home/itcast/QQ_dir/ ./mytest/lisi在后续会提示输入“yes”此时，只能输“yes”而不能简单输入“Y”</code></pre><p>拷贝单个文件可以不加 -r参数，拷贝目录必须要加。</p><p>本地文件复制到远程：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> FileName RemoteUserName@RemoteHostIp:RemoteFile<span class="token function">scp</span> FileName RemoteHostIp:RemoteFolder<span class="token function">scp</span> FileName RemoteHostIp:RemoteFile</code></pre><p>本地目录复制到远程：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -r FolderName RemoteUserName@RemoteHostIp:RemoteFolder<span class="token function">scp</span> -r FolderName RemoteHostIp:RemoteFolder</code></pre><p>远程文件复制到本地：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> RemoteUserName@RemoteHostIp:RemoteFile FileName<span class="token function">scp</span> RemoteHostIp:RemoteFolder FileName<span class="token function">scp</span> RemoteHostIp:RemoteFile FileName</code></pre><p>远程目录复制到本地：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">scp</span> -r RemoteUserName@RemoteHostIp:RemoteFolder FolderName<span class="token function">scp</span> -r RemoteHostIp:RemoteFolder FolderName</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim分屏操作</title>
      <link href="/2019/01/22/vim-fen-ping-cao-zuo/"/>
      <url>/2019/01/22/vim-fen-ping-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>分屏操作:</p><pre class=" language-bash"><code class="language-bash">sp: 上下分屏,后可跟文件名 vsp: 左右分屏,后可跟文件名Ctr+w+w: 在多个窗口切换</code></pre><p>启动分屏:</p><p>1.使用大写O参数进行垂直分屏</p><pre class=" language-bash"><code class="language-bash">$ vim -On file1 file2 <span class="token punctuation">..</span>.</code></pre><p>2.使用小写o参数进行水平分屏</p><pre class=" language-bash"><code class="language-bash">$ vim -on file1 file2 <span class="token punctuation">..</span>.</code></pre><p>注: n是数字，表示分屏的数量,n要大于等于文件个数</p><p>关闭分屏</p><p>1.关闭当前窗口</p><pre class=" language-bash"><code class="language-bash">ctrl+w c</code></pre><p>2.关闭当前窗口，如果只剩最后一个，则退出vim</p><pre class=" language-bash"><code class="language-bash">ctrl+w q </code></pre><p>编辑中分屏</p><p>1.上下分割当前打开的文件</p><pre class=" language-bash"><code class="language-bash">ctrl+w s</code></pre><p>2.上下分割，并打开一个新的文件</p><pre class=" language-bash"><code class="language-bash">:sp filename</code></pre><p>3.左右分割当前打开的文件</p><pre class=" language-bash"><code class="language-bash">ctrl+w <span class="token function">v</span></code></pre><p>4.左右分割，并打开一个新的文件</p><pre class=" language-bash"><code class="language-bash">:vsp filename</code></pre><p>分屏编辑中光标的移动</p><p>vi中的光标键是h,j,k,l,要在各个屏之间切换，只需要先按一下ctrl+w</p><p>1.把光标移动到上边的屏</p><pre class=" language-bash"><code class="language-bash">ctrl+w k</code></pre><p>2.把光标移动到下边的屏</p><pre class=" language-bash"><code class="language-bash">ctrl+w j</code></pre><p>3.把光标移动到右边的屏</p><pre class=" language-bash"><code class="language-bash">ctrl+w l</code></pre><p>4.把光标移动到左边的屏</p><pre class=" language-bash"><code class="language-bash">ctrl+w h</code></pre><p>5.把光标移动到下一个的屏</p><pre class=" language-bash"><code class="language-bash">ctrl+w w</code></pre><p>移动分屏</p><p>1.向上移动</p><pre class=" language-bash"><code class="language-bash">ctrl+w K</code></pre><p>2.向下移动</p><pre><code>ctrl+w J</code></pre><p>3.向右移动</p><pre class=" language-bash"><code class="language-bash">ctrl+w L</code></pre><p>4.向左移动</p><pre class=" language-bash"><code class="language-bash">ctrl+w H</code></pre><p>屏幕尺寸</p><p>1.增加高度</p><pre class=" language-bash"><code class="language-bash">ctrl+w +</code></pre><p>2.减少高度</p><pre class=" language-bash"><code class="language-bash">ctrl+w -</code></pre><p>3.让所有屏的高度一致</p><pre class=" language-bash"><code class="language-bash">ctrl+w <span class="token operator">=</span></code></pre><p>4.左加宽度</p><pre class=" language-bash"><code class="language-bash">ctrl+w <span class="token operator">></span></code></pre><p>5.右加宽度</p><pre class=" language-bash"><code class="language-bash">ctrl+w <span class="token operator">&lt;</span></code></pre><p>6.右增加n宽 (如：n=30)</p><pre class=" language-bash"><code class="language-bash">ctrl+w n <span class="token operator">&lt;</span></code></pre><p>vim打造IDE<br>简洁版IDE</p><pre class=" language-bash"><code class="language-bash">C+p: 生成tagsC+<span class="token punctuation">]</span>: 跳转到函数定义C+t：从函数定义返回C+o：在左侧打开文件列表</code></pre><p>F4:  在右侧打开函数列表</p><pre class=" language-bash"><code class="language-bash">C+n：补齐函数，向下翻</code></pre><p>vimrc是vim的配置文件，可以修改两个位置</p><pre class=" language-bash"><code class="language-bash">1. /etc/vim/vimrc2.~/.vimrc~/.vimrc优先级高</code></pre>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编辑器之神-vim</title>
      <link href="/2019/01/22/bian-ji-qi-zhi-shen-vim/"/>
      <url>/2019/01/22/bian-ji-qi-zhi-shen-vim/</url>
      
        <content type="html"><![CDATA[<h2 id="vi简介"><a href="#vi简介" class="headerlink" title="vi简介"></a>vi简介</h2><p>vi是“Visual interface”的简称，它在Linux上的地位就仿佛Edit程序在DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制。Vi不是一个排版程序，它不象Word或WPS那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。 vi没有菜单，只有命令，且命令繁多。</p><pre class=" language-bash"><code class="language-bash">Vi有三种基本工作模式：+  命令模式+  文本输入模式+  末行模式。 </code></pre><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>任何时候，不管用户处于何种模式，只要按一下ESC键，即可使Vi进入命令模式；我们在shell环境(提示符为$)下输入启动Vi命令，进入编辑器时，也是处于该模式下。在该模式下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合法命令，Vi会响铃报警。 </p><h3 id="文本输入模式"><a href="#文本输入模式" class="headerlink" title="文本输入模式"></a>文本输入模式</h3><p>在命令模式下输入插入命令i、附加命令a 、打开命令o、修改命令c、取代命令r或替换命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键ESC即可。 </p><h3 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h3><p>末行模式也称ex转义模式。在命令模式下，用户按“:”键即可进入末行模式下，此时Vi会在显示窗口的最后一行(通常也是屏幕的最后一行)显示一个“:”作为末行模式的提示符，等待用户输入命令。多数文件管理命令都是在此模式下执行的(如把编辑缓冲区的内容写到文件中等)。末行命令执行完后，Vi自动回到命令模式。例如： </p><pre class=" language-bash"><code class="language-bash">:sp newfile</code></pre><p>则分出一个窗口编辑newfile文件。如果要从命令模式转换到编辑模式，可以键入命令a或者i；如果需要从文本模式返回，则按Esc键即可。在命令模式下输入“:”即可切换到末行模式，然后输入命令。 </p><h3 id="vim基础操作"><a href="#vim基础操作" class="headerlink" title="vim基础操作"></a>vim基础操作</h3><p>vim是从 vi 发展出来的一个文本编辑器 。代码补完、编译及错误跳转等方便编程的功能特别丰富</p><p>进入插入模式:</p><pre class=" language-bash"><code class="language-bash">i: 插入光标前一个字符 I: 插入行首 a: 插入光标后一个字符 A: 插入行未 o: 向下新开一行,插入行首 O: 向上新开一行,插入行首 </code></pre><p>进入命令模式:</p><p>ESC:从插入模式或末行模式进入命令模式</p><p>移动光标:</p><pre class=" language-bash"><code class="language-bash">h: 左移 j: 下移 k: 上移 l: 右移M: 光标移动到中间行 L: 光标移动到屏幕最后一行行首 G: 移动到指定行,行号 -Gw: 向后一次移动一个字 b: 向前一次移动一个字<span class="token punctuation">{</span>: 按段移动,上移 <span class="token punctuation">}</span>: 按段移动,下移Ctr-d: 向下翻半屏 Ctr-u: 向上翻半屏Ctr-f: 向下翻一屏 Ctr-b: 向上翻一屏gg: 光标移动文件开头 G: 光标移动到文件末尾</code></pre><p>删除命令:</p><pre class=" language-bash"><code class="language-bash">x: 删除光标后一个字符,相当于 Del X: 删除光标前一个字符,相当于 Backspacedd: 删除光标所在行,n <span class="token function">dd</span> 删除指定的行数 D: 删除光标后本行所有内容,包含光标所在字符 d0: 删除光标前本行所有内容,不包含光标所在字符dw: 删除光标开始位置的字,包含光标所在字符 </code></pre><p>撤销命令:</p><pre class=" language-bash"><code class="language-bash">u: 一步一步撤销 Ctr-r: 反撤销</code></pre><p>重复命令:</p><pre class=" language-bash"><code class="language-bash">.: 重复上一次操作的命令</code></pre><p>文本行移动:</p><pre><code>&gt;&gt;: 文本行右移 &lt;&lt;: 文本行左移</code></pre><p>复制粘贴:</p><pre><code>yy: 复制当前行,n yy 复制 n 行 p: 在光标所在位置向下新开辟一行,粘贴</code></pre><p>可视模式:</p><pre><code>v: 按字符移动,选中文本 V: 按行移动,选中文本可视模式可以配合 d, y, &gt;&gt;, &lt;&lt; 实现对文本块的删除,复制,左右移动</code></pre><p>替换操作:</p><pre><code>r: 替换当前字符 R: 替换当前行光标后的字符</code></pre><p>查找命令:</p><pre><code>/: str查找n: 下一个N：上一个</code></pre><p>替换命令：</p><pre><code>把abc全部替换成123末行模式下，将光标所在行的abc替换成123:%s/abc/123/g末行模式下，将第一行至第10行之间的abc替换成123:1, 10s/abc/123/g</code></pre><p>vim里执行 shell 下命令:</p><pre><code>末行模式里输入!,后面跟命令</code></pre>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux命令-系统管理</title>
      <link href="/2019/01/22/linux-ming-ling-xi-tong-guan-li/"/>
      <url>/2019/01/22/linux-ming-ling-xi-tong-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="1-查看当前日历：cal"><a href="#1-查看当前日历：cal" class="headerlink" title="1.查看当前日历：cal"></a>1.查看当前日历：cal</h3><p>cal命令用于查看当前日历，-y显示整年日历</p><h3 id="2-显示或设置时间：date"><a href="#2-显示或设置时间：date" class="headerlink" title="2.显示或设置时间：date"></a>2.显示或设置时间：date</h3><p>设置时间格式（需要管理员权限）：</p><p><code>date [MMDDhhmm[[CC]YY][.ss]] +format</code></p><p>CC为年前两位yy为年的后两位，前两位的mm为月，后两位的mm为分钟，dd为天，hh为小时，ss为秒。如： date 010203042016.55。</p><p>显示时间格式（date ‘+%y,%m,%d,%H,%M,%S’）：</p><table><thead><tr><th style="text-align:center">format格式</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">%Y，%y</td><td style="text-align:center">年</td></tr><tr><td style="text-align:center">%m</td><td style="text-align:center">月</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">日</td></tr><tr><td style="text-align:center">%H</td><td style="text-align:center">时</td></tr><tr><td style="text-align:center">%M</td><td style="text-align:center">分</td></tr><tr><td style="text-align:center">%S</td><td style="text-align:center">秒</td></tr></tbody></table><h3 id="3-查看进程信息：ps"><a href="#3-查看进程信息：ps" class="headerlink" title="3.查看进程信息：ps"></a>3.查看进程信息：ps</h3><p>进程是一个具有一定独立功能的程序，它是操作系统动态执行的基本单元。</p><p>ps命令可以查看进程的详细状况，常用选项(选项可以不加“-”)如下：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:center">显示终端上的所有进程，包括其他用户的进程</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:center">显示进程的详细状态</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:center">显示没有控制终端的进程</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">显示加宽，以便显示更多的信息</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">只显示正在运行的进程</td></tr></tbody></table><h3 id="4-动态显示进程：top"><a href="#4-动态显示进程：top" class="headerlink" title="4.动态显示进程：top"></a>4.动态显示进程：top</h3><p>top命令用来动态显示运行中的进程。top命令能够在运行后，在指定的时间间隔更新显示信息。可以在使用top命令时加上-d 来指定显示信息更新的时间间隔。</p><p>在top命令执行后，可以按下按键得到对显示的结果进行排序：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">M</td><td style="text-align:center">根据内存使用量来排序</td></tr><tr><td style="text-align:center">P</td><td style="text-align:center">根据CPU占有率来排序</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">根据进程运行时间的长短来排序</td></tr><tr><td style="text-align:center">U</td><td style="text-align:center">可以根据后面输入的用户名来筛选进程</td></tr><tr><td style="text-align:center">K</td><td style="text-align:center">可以根据后面输入的PID来杀死进程。</td></tr><tr><td style="text-align:center">q</td><td style="text-align:center">退出</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">获得帮助</td></tr></tbody></table><h3 id="5-终止进程：kill"><a href="#5-终止进程：kill" class="headerlink" title="5.终止进程：kill"></a>5.终止进程：kill</h3><p>kill命令指定进程号的进程，需要配合 ps 使用。</p><p>使用格式：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">kill</span> <span class="token punctuation">[</span>-signal<span class="token punctuation">]</span> pid</code></pre><p>信号值从0到15，其中9为绝对终止，可以处理一般信号无法终止的进程。</p><p>kill 9133 ：9133 为应用程序所对应的进程号<br>有些进程不能直接杀死，这时候我们需要加一个参数“ -9 ”，“ -9 ” 代表强制结束：</p><h3 id="6-关机重启：reboot、shutdown、init"><a href="#6-关机重启：reboot、shutdown、init" class="headerlink" title="6.关机重启：reboot、shutdown、init"></a>6.关机重启：reboot、shutdown、init</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">reboot</td><td style="text-align:center">重新启动操作系统</td></tr><tr><td style="text-align:center">shutdown –r now</td><td style="text-align:center">重新启动操作系统，shutdown会给别的用户提示</td></tr><tr><td style="text-align:center">shutdown -h now</td><td style="text-align:center">立刻关机，其中now相当于时间为0的状态</td></tr><tr><td style="text-align:center">shutdown -h 20:25</td><td style="text-align:center">系统在今天的20:25 会关机</td></tr><tr><td style="text-align:center">shutdown -h +10</td><td style="text-align:center">系统再过十分钟后自动关机</td></tr><tr><td style="text-align:center">init 0</td><td style="text-align:center">关机</td></tr><tr><td style="text-align:center">init 6</td><td style="text-align:center">重启</td></tr></tbody></table><h3 id="7-检测磁盘空间：df"><a href="#7-检测磁盘空间：df" class="headerlink" title="7.检测磁盘空间：df"></a>7.检测磁盘空间：df</h3><p>df命令用于检测文件系统的磁盘空间占用和空余情况，可以显示所有文件系统对节点和磁盘块的使用情况。<br>选项|含义|<br>:–:|:–:|<br>-a     |显示所有文件系统的磁盘使用情况<br>-m     |以1024字节为单位显示<br>-t     |显示各指定文件系统的磁盘空间使用情况<br>-T     |显示文件系统</p><h3 id="8-检测目录所占磁盘空间：du"><a href="#8-检测目录所占磁盘空间：du" class="headerlink" title="8.检测目录所占磁盘空间：du"></a>8.检测目录所占磁盘空间：du</h3><p>du命令用于统计目录或文件所占磁盘空间的大小，该命令的执行结果与df类似，du更侧重于磁盘的使用状况。</p><p>du命令的使用格式如下： du [选项] 目录或文件名</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:center">递归显示指定目录中各文件和子目录中文件占用的数据块</td></tr><tr><td style="text-align:center">-s</td><td style="text-align:center">显示指定文件或目录占用的数据块</td></tr><tr><td style="text-align:center">-b</td><td style="text-align:center">以字节为单位显示磁盘占用情况</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:center">计算所有文件大小，对硬链接文件计算多次</td></tr></tbody></table><h3 id="9-查看或配置网卡信息：ifconfig"><a href="#9-查看或配置网卡信息：ifconfig" class="headerlink" title="9.查看或配置网卡信息：ifconfig"></a>9.查看或配置网卡信息：ifconfig</h3><p>我们只是敲：ifconfig，它会显示所有网卡的信息</p><h3 id="10-测试远程主机连通性：ping"><a href="#10-测试远程主机连通性：ping" class="headerlink" title="10.测试远程主机连通性：ping"></a>10.测试远程主机连通性：ping</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ping</span> www.baidu.com</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux命令-用户、权限管理</title>
      <link href="/2019/01/22/linux-ming-ling-yong-hu-quan-xian-guan-li/"/>
      <url>/2019/01/22/linux-ming-ling-yong-hu-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux命令-用户、权限管理"><a href="#Linux命令-用户、权限管理" class="headerlink" title="Linux命令-用户、权限管理"></a>Linux命令-用户、权限管理</h2><p>用户是Unix/Linux系统工作中重要的一环，用户管理包括用户与组账号的管理。</p><p>在Unix/Linux系统中，不论是由本机或是远程登录系统，每个系统都必须拥有一个账号，并且对于不同的系统资源拥有不同的使用权限。</p><p>Unix/Linux系统中的root账号通常用于系统的维护和管理，它对Unix/Linux操作系统的所有部分具有不受限制的访问权限。</p><p>在Unix/Linux安装的过程中，系统会自动创建许多用户账号，而这些默认的用户就称为“标准用户”。</p><p>在大多数版本的Unix/Linux中，都不推荐直接使用root账号登录系统。</p><h3 id="查看当前用户：whoami"><a href="#查看当前用户：whoami" class="headerlink" title="查看当前用户：whoami"></a>查看当前用户：whoami</h3><p>whoami该命令用户查看当前系统当前账号的用户名。可通过cat /etc/passwd查看系统用户信息。</p><p>由于系统管理员通常需要使用多种身份登录系统，例如通常使用普通用户登录系统，然后再以su命令切换到root身份对传统进行管理。这时候就可以使用whoami来查看当前用户的身份。</p><pre class=" language-bash"><code class="language-bash">sun@sun-VirtualBox:/$ <span class="token function">whoami</span>sunsun@sun-VirtualBox:/$ </code></pre><h3 id="查看登录用户：who"><a href="#查看登录用户：who" class="headerlink" title="查看登录用户：who"></a>查看登录用户：who</h3><p>who命令用于查看当前所有登录系统的用户信息。</p><p>常用选项：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-m或am I</td><td style="text-align:center">只显示运行who命令的用户名、登录终端和登录时间</td></tr><tr><td style="text-align:center">-q或–count</td><td style="text-align:center">只显示用户的登录账号和登录用户的数量</td></tr><tr><td style="text-align:center">-u或–heading</td><td style="text-align:center">显示列标题</td></tr></tbody></table><h3 id="退出登录账户：-exit"><a href="#退出登录账户：-exit" class="headerlink" title="退出登录账户： exit"></a>退出登录账户： exit</h3><p>如果是图形界面，退出当前终端；</p><p>如果是使用ssh远程登录，退出登陆账户；</p><p>如果是切换后的登陆用户，退出则返回上一个登陆账号。</p><h3 id="添加用户账号：useradd"><a href="#添加用户账号：useradd" class="headerlink" title="添加用户账号：useradd"></a>添加用户账号：useradd</h3><p>在Unix/Linux中添加用户账号可以使用adduser或useradd命令，因为adduser命令是指向useradd命令的一个链接，因此，这两个命令的使用格式完全一样。</p><p>useradd命令的使用格式如下： useradd [参数] 新建用户账号</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td style="text-align:left">指定用户登录系统时的主目录，如果不使用该参数，系统自动在/home目录下建立与用户名同名目录为主目录</td></tr><tr><td style="text-align:center">-m</td><td style="text-align:left">自动建立目录</td></tr><tr><td style="text-align:center">-g</td><td style="text-align:left">指定组名称</td></tr></tbody></table><p>相关说明：</p><ul><li>Linux每个用户都要有一个主目录，主目录就是第一次登陆系统，用户的默认当前目录(/home/用户)；</li><li>每一个用户必须有一个主目录，所以用useradd创建用户的时候，一定给用户指定一个主目录；</li><li>用户的主目录一般要放到根目录的home目录下，用户的主目录和用户名是相同的；</li><li>如果创建用户的时候，不指定组名，那么系统会自动创建一个和用户名一样的组名。</li></ul><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">useradd -d /home/abc abc -m</td><td style="text-align:left">创建abc用户，如果/home/abc目录不存在，就自动创建这个目录，同时用户属于abc组</td></tr><tr><td style="text-align:center">useradd -d /home/a a -g test -m</td><td style="text-align:left">创建一个用户名字叫a，主目录在/home/a，如果主目录不存在，就自动创建主目录，同时用户属于test组</td></tr><tr><td style="text-align:center">cat /etc/passwd</td><td style="text-align:left">查看系统当前用户名</td></tr></tbody></table><h3 id="设置用户密码：passwd"><a href="#设置用户密码：passwd" class="headerlink" title="设置用户密码：passwd"></a>设置用户密码：passwd</h3><p>在Unix/Linux中，超级用户可以使用passwd命令为普通用户设置或修改用户口令。用户也可以直接使用该命令来修改自己的口令，而无需在命令后面使用用户名</p><h3 id="删除用户：userdel"><a href="#删除用户：userdel" class="headerlink" title="删除用户：userdel"></a>删除用户：userdel</h3><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">userdel abc(用户名)</td><td style="text-align:center">删除abc用户，但不会自动删除用户的主目录</td></tr><tr><td style="text-align:center">userdel -r abc(用户名)</td><td style="text-align:center">删除用户，同时删除用户的主目录</td></tr></tbody></table><h3 id="切换用户：su"><a href="#切换用户：su" class="headerlink" title="切换用户：su"></a>切换用户：su</h3><p>可以通过su命令切换用户，su后面可以加“-”。su和su –命令不同之处在于，su -切换到对应的用户时会将当前的工作目录自动转换到切换后的用户主目录：</p><p>注意：如果是ubuntu平台，需要在命令前加“sudo”，如果在某些操作需要管理员才能操作，ubuntu无需切换到root用户即可操作，只需加“sudo”即可。sudo是ubuntu平台下允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，减少了root 用户的登陆和管理时间，提高了安全性。</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">su</td><td style="text-align:center">切换到root用户</td></tr><tr><td style="text-align:center">su root</td><td style="text-align:center">切换到root用户</td></tr><tr><td style="text-align:center">su -</td><td style="text-align:center">切换到root用户，同时切换目录到/root</td></tr><tr><td style="text-align:center">su - root</td><td style="text-align:center">切换到root用户，同时切换目录到/root</td></tr><tr><td style="text-align:center">su 普通用户</td><td style="text-align:center">切换到普通用户</td></tr><tr><td style="text-align:center">su - 普通用户</td><td style="text-align:center">切换到普通用户，同时切换普通用户所在的目录</td></tr></tbody></table><h3 id="查看有哪些用户组"><a href="#查看有哪些用户组" class="headerlink" title="查看有哪些用户组"></a>查看有哪些用户组</h3><p>方法一:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/group</code></pre><p>方法二:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">groupmod</span> +三次tab键</code></pre><h4 id="为创建的普通用户添加sudo权限"><a href="#为创建的普通用户添加sudo权限" class="headerlink" title="为创建的普通用户添加sudo权限"></a>为创建的普通用户添加sudo权限</h4><p>新创建的用户，默认不能sudo，需要进行一下操作</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> -a -G adm 用户名<span class="token function">sudo</span> <span class="token function">usermod</span> -a -G <span class="token function">sudo</span> 用户名</code></pre><h3 id="usermod-g-与-G的区别"><a href="#usermod-g-与-G的区别" class="headerlink" title="usermod -g 与 -G的区别"></a>usermod -g 与 -G的区别</h3><pre class=" language-bash"><code class="language-bash">-g用来制定这个用户默认的用户组-G一般配合<span class="token string">'-a'</span>来完成向其它组添加</code></pre><h3 id="修改文件权限：chmod"><a href="#修改文件权限：chmod" class="headerlink" title="修改文件权限：chmod"></a>修改文件权限：chmod</h3><p>chmod 修改文件权限有两种使用格式：字母法与数字法。</p><p>字母法：chmod u/g/o/a +/-/= rwx 文件</p><table><thead><tr><th style="text-align:center">[ u/g/o/a ]</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:center">user 表示该文件的所有者</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">group 表示与该文件的所有者属于同一组( group )者，即用户组</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">other 表示其他以外的人</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">all 表示这三者皆是</td></tr></tbody></table><p>[ +-= ]</p><table><thead><tr><th style="text-align:center">[ +-= ]</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">增加权限</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">撤销权限</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">设定权限</td></tr></tbody></table><p>rwx</p><table><thead><tr><th style="text-align:center">rwx</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">read 表示可读取，对于一个目录，如果没有r权限，那么就意味着不能通过ls查看这个目录的内容。</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">write 表示可写入，对于一个目录，如果没有w权限，那么就意味着不能在目录下创建新的文件。</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">excute 表示可执行，对于一个目录，如果没有x权限，那么就意味着不能通过cd进入这个目录。</td></tr></tbody></table><p>数字法：“rwx” 这些权限也可以用数字来代替</p><table><thead><tr><th style="text-align:center">字母</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">读取权限，数字代号为 “4”</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">写入权限，数字代号为 “2”</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">执行权限，数字代号为 “1”</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">不具任何权限，数字代号为 “0”</td></tr></tbody></table><p>如执行：chmod u=rwx,g=rx,o=r filename 就等同于：chmod u=7,g=5,o=4 filename</p><p>chmod 751 file：</p><ul><li>文件所有者：读、写、执行权限</li><li>同组用户：读、执行的权限</li><li>其它用户：执行的权限</li></ul><p>注意：如果想递归所有目录加上相同权限，需要加上参数“ -R ”。 如：chmod 777 test/ -R 递归 test 目录下所有文件加 777 权限</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux常用基本命令</title>
      <link href="/2019/01/22/linux-chang-yong-ji-ben-ming-ling/"/>
      <url>/2019/01/22/linux-chang-yong-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><ul><li>很多人可能在电视或电影中看到过类似的场景，黑客面对一个黑色的屏幕，上面飘着密密麻麻的字符，梆梆一顿敲，就完成了窃取资料的任务。</li><li>Linux 刚出世时没有什么图形界面，所有的操作全靠命令完成，就如同电视里的黑客那样，充满了神秘与晦涩。</li><li>近几年来，尽管 Linux 发展得非常迅速，图形界面越来越友好，但是在真正的开发过程中，Linux 命令行的应用还是占有非常重要的席位，而且许多Linux功能在命令行界面要比图形化界面下运行的快。可以说不会命令行，就不算会 Linux</li><li>Linux 提供了大量的命令，利用它可以有效地完成大量的工作，如磁盘操作、文件存取、目录操作、进程管理、文件权限设定等。Linux 发行版本最少的命令也有 200 多个，这里只介绍比较重要和使用频率最多的命令。</li></ul><h3 id="命令使用方法"><a href="#命令使用方法" class="headerlink" title="命令使用方法"></a>命令使用方法</h3><p>Linux命令格式:</p><pre class=" language-bash"><code class="language-bash">   <span class="token function">command</span>  <span class="token punctuation">[</span>-options<span class="token punctuation">]</span>  <span class="token punctuation">[</span>parameter1<span class="token punctuation">]</span>  …</code></pre><p>说明：<br>command: 命令名,相应功能的英文单词或单词的缩写 [-options]：选项,可用来对命令进行控制，也可以省略，[]代表可选 parameter1 …：传给命令的参数：可以是零个一个或多个</p><h2 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h2><h4 id="–help"><a href="#–help" class="headerlink" title="–help"></a>–help</h4><p>一般是linux命令自带的帮助信息</p><p>如：ls –help</p><h3 id="man-有问题找男人，manual"><a href="#man-有问题找男人，manual" class="headerlink" title="man(有问题找男人，manual)"></a>man(有问题找男人，manual)</h3><p>man是linux提供的一个手册，包含了绝大部分的命令、函数使用说明</p><p>该手册分成很多章节（section），使用man时可以指定不同的章节来浏览。</p><p>例：man ls ; man 2 printf</p><p>man中各个section意义如下：</p><ol><li>Standard commands（标准命令）</li><li>System calls（系统调用，如open,write）</li><li>Library functions（库函数，如printf,fopen）</li><li>Special devices（设备文件的说明，/dev下各种设备）</li><li>File formats（文件格式，如passwd）</li><li>Games and toys（游戏和娱乐）</li><li>Miscellaneous（杂项、惯例与协定等，例如Linux档案系统、网络协定、ASCII 码；environ全局变量）</li><li>Administrative Commands（管理员命令，如ifconfig）</li></ol><p>man是按照手册的章节号的顺序进行搜索的。</p><p>man设置了如下的功能键：</p><table><thead><tr><th style="text-align:center">功能键</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">空格键</td><td style="text-align:left">显示手册页的下一屏</td></tr><tr><td style="text-align:center">Enter键</td><td style="text-align:left">一次滚动手册页的一行</td></tr><tr><td style="text-align:center">b</td><td style="text-align:left">回滚一屏</td></tr><tr><td style="text-align:center">f</td><td style="text-align:left">前滚一屏</td></tr><tr><td style="text-align:center">q</td><td style="text-align:left">退出man命令</td></tr><tr><td style="text-align:center">h</td><td style="text-align:left">列出所有功能键</td></tr><tr><td style="text-align:center">/word</td><td style="text-align:left">搜索word字符串</td></tr></tbody></table><h3 id="自动补全："><a href="#自动补全：" class="headerlink" title="自动补全："></a>自动补全：</h3><p>在敲出命令的前几个字母的同时，按下tab键，系统会自动帮我们补全命令</p><h3 id="历史命令："><a href="#历史命令：" class="headerlink" title="历史命令："></a>历史命令：</h3><p>当系统执行过一些命令后，可按上下键翻看以前的命令，history将执行过的命令列举出来</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux命令-文件、磁盘管理</title>
      <link href="/2019/01/22/linux-mu-lu/"/>
      <url>/2019/01/22/linux-mu-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="1-查看文件信息：ls"><a href="#1-查看文件信息：ls" class="headerlink" title="1.查看文件信息：ls"></a>1.查看文件信息：ls</h3><p>ls是英文单词list的简写，其功能为列出目录的内容，是用户最常用的命令之一，它类似于DOS下的dir命令。</p><p><code>Linux文件或者目录名称最长可以有265个字符，“.”代表当前目录，“..”代表上一级目录，以“.”开头的文件为隐藏文件，需要用 -a 参数才能显示。</code><br>ls常用参数：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:left">显示指定目录下所有子目录与文件，包括隐藏文件</td></tr><tr><td style="text-align:center">-l</td><td style="text-align:left">以列表方式显示文件的详细信息</td></tr><tr><td style="text-align:center">-h</td><td style="text-align:left">配合 -l 以人性化的方式显示文件大小</td></tr></tbody></table><pre class=" language-bash"><code class="language-bash">sun@sun-VirtualBox:/$ <span class="token function">ls</span>bin   cdrom  etc   initrd.img      lib    lost+found  mnt  proc  run   snap  swapfile  tmp  var      vmlinuz.oldboot  dev    home  initrd.img.old  lib64  media       opt  root  sbin  srv   sys       usr  vmlinuz</code></pre><p>与DOS下的文件操作类似，在Unix/Linux系统中，也同样允许使用特殊字符来同时引用多个文件名，这些特殊字符被称为通配符。</p><table><thead><tr><th style="text-align:center">通配符</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">文件代表文件名中所有字符</td></tr><tr><td style="text-align:center">ls te*</td><td style="text-align:left">查找以te开头的文件</td></tr><tr><td style="text-align:center">ls *html</td><td style="text-align:left">查找结尾为html的文件</td></tr><tr><td style="text-align:center">？</td><td style="text-align:left">代表文件名中任意一个字符</td></tr><tr><td style="text-align:center">ls ?.c</td><td style="text-align:left">只找第一个字符任意，后缀为.c的文件</td></tr><tr><td style="text-align:center">ls a.?</td><td style="text-align:left">只找只有3个字符，前2字符为a.，最后一个字符任意的文件</td></tr><tr><td style="text-align:center">[]     [”和“]”</td><td style="text-align:left">将字符组括起来，表示可以匹配字符组中的任意一个。“-”用于表示字符范围。</td></tr><tr><td style="text-align:center">[abc]</td><td style="text-align:left">匹配a、b、c中的任意一个</td></tr><tr><td style="text-align:center">[a-f]</td><td style="text-align:left">匹配从a到f范围内的的任意一个字符</td></tr><tr><td style="text-align:center">ls [a-f]*</td><td style="text-align:left">找到从a到f范围内的的任意一个字符开头的文件</td></tr><tr><td style="text-align:center">ls a-f</td><td style="text-align:left">查找文件名为a-f的文件,当“-”处于方括号之外失去通配符的作用</td></tr><tr><td style="text-align:center">\</td><td style="text-align:left">如果要使通配符作为普通字符使用，可以在其前面加上转义字符。“?”和“*”处于方括号内时不用使用转义字符就失去通配符的作用。</td></tr><tr><td style="text-align:center">ls *a</td><td style="text-align:left">查找文件名为*a的文件</td></tr></tbody></table><p>###输出重定向命令：&gt;<br>Linux允许将命令执行结果重定向到一个文件，本应显示在终端上的内容保存到指定文件中。</p><p>如：ls &gt; test.txt ( test.txt 如果不存在，则创建，存在则覆盖其内容 )<br>注意：<code>&gt;输出重定向会覆盖原来的内容，&gt;&gt;输出重定向则会追加到文件的尾部。</code></p><h3 id="分屏显示：more"><a href="#分屏显示：more" class="headerlink" title="分屏显示：more"></a>分屏显示：more</h3><p>查看内容时，在信息过长无法在一屏上显示时，会出现快速滚屏，使得用户无法看清文件的内容，此时可以使用more命令，每次只显示一页，按下空格键可以显示下一页，按下q键退出显示，按下h键可以获取帮助。</p><h3 id="管道："><a href="#管道：" class="headerlink" title="管道：|"></a>管道：|</h3><p>管道：一个命令的输出可以通过管道做为另一个命令的输入。</p><p>管道我们可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里“ | ”的左右分为两端，左端塞东西(写)，右端取东西(读)。</p><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><p>clear作用为清除终端上的显示(类似于DOS的cls清屏功能)，也可使用快捷键：Ctrl + l ( “l” 为字母 )。</p><h3 id="切换工作目录：-cd"><a href="#切换工作目录：-cd" class="headerlink" title="切换工作目录： cd"></a>切换工作目录： cd</h3><p>在使用Unix/Linux的时候，经常需要更换工作目录。cd命令可以帮助用户切换工作目录。<code>Linux所有的目录和文件名大小写敏感</code></p><p>cd后面可跟绝对路径，也可以跟相对路径。如果省略目录，则默认切换到当前用户的主目录。</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">cd</td><td style="text-align:left">切换到当前用户的主目录(/home/用户目录)，用户登陆的时候，默认的目录就是用户的主目录。</td></tr><tr><td style="text-align:center">cd ~</td><td style="text-align:left">切换到当前用户的主目录(/home/用户目录)</td></tr><tr><td style="text-align:center">cd .</td><td style="text-align:left">切换到当前目录</td></tr><tr><td style="text-align:center">cd ..</td><td style="text-align:left">切换到上级目录</td></tr><tr><td style="text-align:center">cd -</td><td style="text-align:left">可进入上次所在的目录</td></tr></tbody></table><p>注意：</p><p>   <code>如果路径是从根路径开始的，则路径的前面需要加上 “ / ”，如 “ /mnt ”，通常进入某个目录里的文件夹，前面不用加 “ / ”。</code></p><h3 id="显示当前路径：pwd"><a href="#显示当前路径：pwd" class="headerlink" title="显示当前路径：pwd"></a>显示当前路径：pwd</h3><p>使用pwd命令可以显示当前的工作目录，该命令很简单，直接输入pwd即可，后面不带参数。</p><h3 id="创建目录：mkdir"><a href="#创建目录：mkdir" class="headerlink" title="创建目录：mkdir"></a>创建目录：mkdir</h3><p>通过mkdir命令可以创建一个新的目录。参数-p可递归创建目录。</p><p>需要注意的是新建目录的名称不能与当前目录中已有的目录或文件同名，并且目录创建者必须对当前目录具有写权限。</p><h3 id="删除目录：rmdir"><a href="#删除目录：rmdir" class="headerlink" title="删除目录：rmdir"></a>删除目录：rmdir</h3><p>可使用rmdir命令删除一个目录。必须离开目录，并且目录必须为空目录，不然提示删除失败。</p><h3 id="删除文件：rm"><a href="#删除文件：rm" class="headerlink" title="删除文件：rm"></a>删除文件：rm</h3><p>可通过rm删除文件或目录。使用rm命令要小心，因为文件删除后不能恢复。为了防止文件误删，可以在rm后使用-i参数以逐个确认要删除的文件</p><p>常用参数及含义如下表所示：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">-i</td><td style="text-align:left">以进行交互式方式执行</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:left">强制删除，忽略不存在的文件，无需提示</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:left">递归地删除目录下的内容，删除文件夹时必须加此参数</td></tr></tbody></table><p>###建立链接文件：ln</p><p>Linux链接文件类似于Windows下的快捷方式。</p><p>链接文件分为软链接和硬链接。</p><p>软链接：软链接不占用磁盘空间，源文件删除则软链接失效。</p><p>硬链接：硬链接只能链接普通文件，不能链接目录。</p><p>使用格式：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> 源文件 链接文件<span class="token function">ln</span> -s 源文件 链接文件</code></pre><p>如果没有-s选项代表建立一个硬链接文件，两个文件占用相同大小的硬盘空间，即使删除了源文件，链接文件还是存在，所以-s选项是更常见的形式。</p><p>注意：如果软链接文件和源文件不在同一个目录，源文件要使用绝对路径，不能使用相对路径。</p><h3 id="文本搜索：grep"><a href="#文本搜索：grep" class="headerlink" title="文本搜索：grep"></a>文本搜索：grep</h3><p>Linux系统中grep命令是一种强大的文本搜索工具，grep允许对文本文件进行模式查找。如果找到匹配模式， grep打印包含模式的所有行。</p><p>grep一般格式为：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>-选项<span class="token punctuation">]</span> ‘搜索内容串’文件名</code></pre><p>在grep命令中输入字符串参数时，最好引号或双引号括起来。例如：grep‘a ’1.txt。</p><p>常用选项说明：<br>参数|含义|<br>:–:|:–|<br>-v     |显示不包含匹配文本的所有行（相当于求反）<br>-n     |显示匹配行及行号<br>-i     |忽略大小写</p><p>grep搜索内容串可以是正则表达式。</p><p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p><p>grep常用正则表达式：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">^a</td><td style="text-align:left">行首,搜寻以 m 开头的行；grep -n ‘^a’ 1.txt</td></tr><tr><td style="text-align:center">ke$</td><td style="text-align:left">行尾,搜寻以 ke 结束的行；grep -n ‘ke$’ 1.txt</td></tr><tr><td style="text-align:center">[Ss]igna[Ll]</td><td style="text-align:left">匹配 [] 里中一系列字符中的一个；搜寻匹配单词signal、signaL、Signal、SignaL的行；grep -n ‘[Ss]igna[Ll]’ 1.txt</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">(点)匹配一个非换行符的字符；匹配 e 和 e 之间有任意一个字符，可以匹配 eee，eae，eve，但是不匹配 ee，eaae；grep -n ‘e.e’ 1.txt</td></tr></tbody></table><h3 id="查找文件：find"><a href="#查找文件：find" class="headerlink" title="查找文件：find"></a>查找文件：find</h3><p>find命令功能非常强大，通常用来在特定的目录下搜索符合条件的文件，也可以用来搜索特定用户属主的文件。</p><p>常用用法：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">find ./ -name test.sh</td><td style="text-align:left">查找当前目录下所有名为test.sh的文件</td></tr><tr><td style="text-align:center">find ./ -name ‘*.sh’</td><td style="text-align:left">查找当前目录下所有后缀为.sh的文件</td></tr><tr><td style="text-align:center">find ./ -name “[A-Z]*”</td><td style="text-align:left">查找当前目录下所有以大写字母开头的文件</td></tr><tr><td style="text-align:center">find /tmp -size 2M</td><td style="text-align:left">查找在/tmp 目录下等于2M的文件</td></tr><tr><td style="text-align:center">find /tmp -size +2M</td><td style="text-align:left">查找在/tmp 目录下大于2M的文件</td></tr><tr><td style="text-align:center">find /tmp -size -2M</td><td style="text-align:left">查找在/tmp 目录下小于2M的文件</td></tr><tr><td style="text-align:center">find ./ -size +4k -size -5M</td><td style="text-align:left">查找当前目录下大于4k，小于5M的文件</td></tr><tr><td style="text-align:center">find ./ -perm 0777</td><td style="text-align:left">查找当前目录下权限为 777 的文件或目录</td></tr></tbody></table><h3 id="拷贝文件：cp"><a href="#拷贝文件：cp" class="headerlink" title="拷贝文件：cp"></a>拷贝文件：cp</h3><p>cp命令的功能是将给出的文件或目录复制到另一个文件或目录中，相当于DOS下的copy命令。</p><p>常用选项说明：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">-a</td><td style="text-align:left">该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:left">已经存在的目标文件而不提示</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:left">交互式复制，在覆盖目标文件之前将给出提示要求用户确认</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:left">若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为一个目录名。</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:left">显示拷贝进度</td></tr></tbody></table><h3 id="移动文件：mv"><a href="#移动文件：mv" class="headerlink" title="移动文件：mv"></a>移动文件：mv</h3><p>用户可以使用mv命令来移动文件或目录，也可以给文件或目录重命名。</p><p>常用选项说明：</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">-f</td><td style="text-align:left">禁止交互式操作，如有覆盖也不会给出提示</td></tr><tr><td style="text-align:center">-i</td><td style="text-align:left">确认交互方式操作，如果mv操作将导致对已存在的目标文件的覆盖，系统会询问是否重写，要求用户回答以避免误覆盖文件</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:left">显示移动进度</td></tr></tbody></table><h3 id="归档管理：tar"><a href="#归档管理：tar" class="headerlink" title="归档管理：tar"></a>归档管理：tar</h3><p>计算机中的数据经常需要备份，tar是Unix/Linux中最常用的备份工具，此命令可以把一系列文件归档到一个大文件中，也可以把档案文件解开以恢复数据。</p><p>tar使用格式 tar [参数] 打包文件名 文件</p><p>tar命令很特殊，其参数前面可以使用“-”，也可以不使用。</p><p>常用参数:</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:center">-c</td><td style="text-align:left">生成档案文件，创建打包文件</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:left">列出归档解档的详细过程，显示进度</td></tr><tr><td style="text-align:center">-f</td><td style="text-align:left">指定档案文件名称，f后面一定是.tar文件，所以必须放选项最后</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:left">列出档案中包含的文件</td></tr><tr><td style="text-align:center">-x</td><td style="text-align:left">解开档案文件</td></tr></tbody></table><p>注意：除了f需要放在参数的最后，其它参数的顺序任意。</p><h3 id="文件压缩解压：gzip"><a href="#文件压缩解压：gzip" class="headerlink" title="文件压缩解压：gzip"></a>文件压缩解压：gzip</h3><p>tar与gzip命令结合使用实现文件打包、压缩。 tar只负责打包文件，但不压缩，用gzip压缩tar打包后的文件，其扩展名一般用xxxx.tar.gz。</p><p>gzip使用格式如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">gzip</span>  <span class="token punctuation">[</span>选项<span class="token punctuation">]</span>  被压缩文件</code></pre><p>常用选项：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-d</td><td style="text-align:center">解压</td></tr><tr><td style="text-align:center">-r</td><td style="text-align:center">压缩所有子目录</td></tr></tbody></table><p>tar这个命令并没有压缩的功能，它只是一个打包的命令，但是在tar命令中增加一个选项(-z)可以调用gzip实现了一个压缩的功能，实行一个先打包后压缩的过程。</p><p>压缩用法：tar cvzf 压缩包包名 文件1 文件2 …</p><pre class=" language-bash"><code class="language-bash">-z ：指定压缩包的格式为：file.tar.gz</code></pre><p>解压到指定目录：-C （大写字母“C”）</p><h3 id="文件压缩解压：bzip2"><a href="#文件压缩解压：bzip2" class="headerlink" title="文件压缩解压：bzip2"></a>文件压缩解压：bzip2</h3><p>tar与bzip2命令结合使用实现文件打包、压缩(用法和gzip一样)。</p><p>tar只负责打包文件，但不压缩，用bzip2压缩tar打包后的文件，其扩展名一般用xxxx.tar.gz2。</p><p>在tar命令中增加一个选项(-j)可以调用bzip2实现了一个压缩的功能，实行一个先打包后压缩的过程。</p><p>压缩用法：tar -jcvf 压缩包包名 文件…(tar jcvf bk.tar.bz2 *.c)</p><p>解压用法：tar -jxvf 压缩包包名 (tar jxvf bk.tar.bz2)</p><h3 id="文件压缩解压：zip、unzip"><a href="#文件压缩解压：zip、unzip" class="headerlink" title="文件压缩解压：zip、unzip"></a>文件压缩解压：zip、unzip</h3><p>通过zip压缩文件的目标文件不需要指定扩展名，默认扩展名为zip。</p><p>压缩文件：zip [-r] 目标文件(没有扩展名) 源文件</p><p>解压文件：unzip -d 解压后目录文件 压缩文件</p><h3 id="查看命令位置：which"><a href="#查看命令位置：which" class="headerlink" title="查看命令位置：which"></a>查看命令位置：which</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工欲善其事必先利其器</title>
      <link href="/2019/01/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi/"/>
      <url>/2019/01/22/gong-yu-shan-qi-shi-bi-xian-li-qi-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="大道至简"><a href="#大道至简" class="headerlink" title="大道至简"></a>大道至简</h2><p>生物信息的入门不仅仅要扎实的生物基础，还要熟练的使用编程语言，多数的科学团队至少会同时使用R与Python。在学习中我认为每次只学习并精通一种工具，潜心学习一种工具，比同时学习多个工具掌握<br>的更快，无论工作学习中都应该努力的去学习新的知识，但一定要充分的理解原有知识后，再去学习感兴趣的新知识。</p><h2 id="千里之行，始于足下"><a href="#千里之行，始于足下" class="headerlink" title="千里之行，始于足下"></a>千里之行，始于足下</h2><p>大多数生信分析软件都是基于Linux开发的，当你学会了Linux之后，那你就可以在命令学习使用Bwa，samtools这些已有的工具，可以走标准化的分流程了。学习Linux首先从认识系统开始：</p><h2 id="Linux的不同版本以及应用领域"><a href="#Linux的不同版本以及应用领域" class="headerlink" title="Linux的不同版本以及应用领域"></a>Linux的不同版本以及应用领域</h2><h3 id="1-Linux内核"><a href="#1-Linux内核" class="headerlink" title="1.Linux内核"></a>1.Linux内核</h3><p>内核(kernel)是系统的心脏，是运行程序和管理像磁盘和打印机等硬件设备的核心程序，它提供了一个在裸设备与应用程序间的抽象层。</p><p>Linux内核版本又分为稳定版和开发版，两种版本是相互关联，相互循环：</p><pre><code>稳定版：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些bug或加入一些新的驱动程序。开发版：由于要试验各种解决方案，所以变化很快。</code></pre><p>内核源码网址：<a href="http://www.kernel.org" target="_blank" rel="noopener">http://www.kernel.org</a> 所有来自全世界的对Linux源码的修改最终都会汇总到这个网站，由Linus领导的开源社区对其进行甄别和修改最终决定是否进入到Linux主线内核源码中。</p><h3 id="2-Linux发行版本"><a href="#2-Linux发行版本" class="headerlink" title="2.Linux发行版本"></a>2.Linux发行版本</h3><p>Linux发行版 (也被叫做 GNU/Linux 发行版) 通常包含了包括桌面环境、办公套件、媒体播放器、数据库等应用软件。</p><table><thead><tr><th style="text-align:center">排名</th><th style="text-align:center">2016</th><th style="text-align:center">2015</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Linux Mint</td><td style="text-align:center">Linux Mint</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Debian</td><td style="text-align:center">Debian</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Ubuntu</td><td style="text-align:center">Ubuntu</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">openSUSE</td><td style="text-align:center">openSUSE</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">redhat</td><td style="text-align:center">Fedora</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">Fedora</td><td style="text-align:center">Mageia</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">Manjaro</td><td style="text-align:center">Manjaro</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Mageia</td><td style="text-align:center">CentOS</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">CentOS</td><td style="text-align:center">Arch</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">Arch</td><td style="text-align:center">Elementary</td></tr></tbody></table><h3 id="3-应用领域"><a href="#3-应用领域" class="headerlink" title="3.应用领域"></a>3.应用领域</h3><h3 id="个人桌面领域"><a href="#个人桌面领域" class="headerlink" title="个人桌面领域"></a>个人桌面领域</h3><p>此领域是传统linux应用最薄弱的环节，传统linux由于界面简单、操作复杂、应用软件少的缺点，一直被windows所压制，但近些年来随着ubuntu、fedora等优秀桌面环境的兴起，同时各大硬件厂商对其支持的加大，linux在个人桌面领域的占有率在逐渐的提高</p><p>典型代表：ubuntu、fedora、suse linux</p><p>在Ubuntu中玩QQ</p><h4 id="服务器领域"><a href="#服务器领域" class="headerlink" title="服务器领域"></a>服务器领域</h4><p>linux在服务器领域的应用是其重要分支</p><p>linux免费、稳定、高效等特点在这里得到了很好的体现，但早期因为维护、运行等原因同样受到了很大的限制，但近些年来linux服务器市场得到了飞速的提升，尤其在一些高端领域尤为广泛<br>典型代表：</p><ul><li>Red Hat公司的AS系列</li></ul><ul><li>完全开源的debian系列</li></ul><ul><li>suse EnterPrise 11系列等</li></ul><h4 id="嵌入式领域"><a href="#嵌入式领域" class="headerlink" title="嵌入式领域"></a>嵌入式领域</h4><p>近些年来linux在嵌入式领域的应用得到了飞速的提高</p><p>linux运行稳定、对网络的良好支持性、低成本，且可以根据需要进行软件裁剪，内核最小可以达到几百KB等特点，使其近些年来在嵌入式领域的应用得到非常大的提高</p><p>主要应用：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、等都是其应用领域，得到了摩托罗拉、三星、NEC、Google等公司的大力推广</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生信学习从制作博客开始</title>
      <link href="/2018/10/17/sheng-xin-xue-xi-cong-zhi-zuo-bo-ke-kai-shi/"/>
      <url>/2018/10/17/sheng-xin-xue-xi-cong-zhi-zuo-bo-ke-kai-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="借用名言："><a href="#借用名言：" class="headerlink" title="借用名言："></a>借用名言：</h2><p>培根说：读书使人充实，讨论使人机敏，写作使人精确。</p><p>最近用hexo搭建了一个博客系统并部署在了GitHub，希望通过写作来记录自己的生信学习之路，好让我更好的去思考问题；也希望以这种方式来监督提醒自己在这条喜欢的路上走下去，再回首，我能看到一个不一样的自己，今天就将搭建过程分享给大家。</p><h2 id="什么是hexo"><a href="#什么是hexo" class="headerlink" title="什么是hexo"></a>什么是hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架，Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><p>hexo 是基于Node.js的，安装前首先要安装好Node.js。另外我们要将博客系统发布到gihub，所以git也是必不可少的。</p><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。我们在windows环境下安装很方便，首先从<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>官网下载安装包，按照官网介绍安装即可。安装完成后，应出现以下效果，表示安装成功：</p><pre class=" language-bash"><code class="language-bash">C:\Users\abc<span class="token operator">></span> node -vv8.12.0</code></pre><h2 id="安装GitHub"><a href="#安装GitHub" class="headerlink" title="安装GitHub"></a>安装GitHub</h2><p>Git是开源免费的分布式版本控制系统是用来处理代码量由小到大相关问题的。安装方式请参考Git官网，或者本站的Git相关内容。<br>安装完毕后，应出现如下效果，表示安装成功：</p><pre class=" language-bash"><code class="language-bash">C:\Users\abc<span class="token operator">></span> <span class="token function">git</span> versiongit version 2.19.1.windows.1</code></pre><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>使用npm按照hexo即可，运行如下代码全局按照hexo-cli这个hexo的命令行工具</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完毕后，应出现如下效果，表示安装成功：</p><pre class=" language-bash"><code class="language-bash">C:\Users\abc<span class="token operator">></span> hexo -vhexo-cli: 1.1.0os: Windows_NT 10.0.17134 win32 x64http_parser: 2.8.0node: 8.12.0v8: 6.2.414.66uv: 1.19.2zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.32.0napi: 3openssl: 1.0.2picu: 60.1unicode: 10.0cldr: 32.0tz: 2017c</code></pre><h2 id="Hexo建站"><a href="#Hexo建站" class="headerlink" title="Hexo建站"></a>Hexo建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">></span>$ <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml├── package.json├── scaffolds├── <span class="token function">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes</code></pre><p>此时一个基本的博客已经建立完毕了。</p><h2 id="运行Hexo博客"><a href="#运行Hexo博客" class="headerlink" title="运行Hexo博客"></a>运行Hexo博客</h2><p>进入博客目录，执行 hexo server 即可运行hexo服务器。</p><pre class=" language-bash"><code class="language-bash">D:\www\Hexo<span class="token operator">></span>hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token keyword">.</span> Press Ctrl+C to stop.</code></pre><p>此时，浏览器访问<a href="http://localhost:4000，即可看到你的博客。" target="_blank" rel="noopener">http://localhost:4000，即可看到你的博客。</a><br>至此，hexo搭建的博客已经完成。该博客使用方法，如何发文章，分类，标签等操作请参考Hexo文档，本文不再赘述。</p><h2 id="发布到GitHub"><a href="#发布到GitHub" class="headerlink" title="发布到GitHub"></a>发布到GitHub</h2><p>GitHub上允许我们搭建自己的静态站点，在不购买自己的服务器情况下，可以有自己的博客。<br>需要用到Hexo提供的发布相关功能，同时需要在github上做一定的配置。</p><h2 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h2><blockquote><p>已有账号的跳过此步骤</p></blockquote><p>注册操作，跟着GitHub引导完成即可，GitHub注册</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>登录后，创建新版本库<a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a><br>注意：版本库名字强烈建议是 <code>&lt;你的用户&gt;.github.io</code> 这种格式<br>创建完毕后，就可以使用  <code>&lt;你的用户&gt;.github.io</code> 这种方式访问你的github博客地址，但现在访问应该不会成功，因为是一个新创建的版本库，是空的，一无所有….。接下来就把我们本地的博客内容部署到这个github版本库上。</p><h2 id="GitHub的SSH-keys设置"><a href="#GitHub的SSH-keys设置" class="headerlink" title="GitHub的SSH keys设置"></a>GitHub的SSH keys设置</h2><p>在部署之前，需要保证GitHub可以验证我们的机器，需要将本地的RAS-publicKey告知给GitHub，步骤如下：</p><h3 id="本地RAS密钥对生成"><a href="#本地RAS密钥对生成" class="headerlink" title="本地RAS密钥对生成"></a>本地RAS密钥对生成</h3><p>进入到 用户目录/.ssh目录下，查看是否已经存在了， 私钥id_rsa 公钥id_rsa.pub</p><pre class=" language-bash"><code class="language-bash">C:\Users\abc<span class="token operator">></span> <span class="token function">cd</span> .sshC:\Users\abc\.ssh<span class="token operator">></span> <span class="token function">dir</span>-a----       2018/1/22    19:46           1679 id_rsa-a----       2018/1/22   19:46            403 id_rsa.pub</code></pre><p>上面的输出表示已经存在。若不存在，执行 ssh-keygen 生成即可（持续回车即可）：</p><pre class=" language-bash"><code class="language-bash">C:\Users\abc\.ssh<span class="token operator">></span> ssh-keygen.exe -t rsaGenerating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>C:\Users\abc/.ssh/id_rsa<span class="token punctuation">)</span>:Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> C:\Users\abc/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> C:\Users\abc/.ssh/id_rsa.pub.The key fingerprint is:SHA256:ymf2laAmgHVsGakavggdXrzORtVRNxkuKYq444C5Irs kang@V1N3RYQG70NI7YDThe key's randomart image is:+---<span class="token punctuation">[</span>RSA 2048<span class="token punctuation">]</span>----+<span class="token operator">|</span>      <span class="token punctuation">..</span> <span class="token punctuation">..</span> +o   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token punctuation">..</span>o.  +<span class="token punctuation">..</span>   <span class="token operator">|</span><span class="token operator">|</span>   <span class="token punctuation">..</span>.<span class="token operator">=</span><span class="token punctuation">..</span>.o <span class="token keyword">.</span>    <span class="token operator">|</span><span class="token operator">|</span>  o+++<span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token keyword">.</span>     <span class="token operator">|</span><span class="token operator">|</span> +o<span class="token operator">=</span>oo. S <span class="token keyword">.</span>      <span class="token operator">|</span><span class="token operator">|</span>o.<span class="token operator">=</span>.oo <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span>   <span class="token operator">|</span><span class="token operator">|</span><span class="token operator">=</span>.o<span class="token operator">=</span>  + *   o    <span class="token operator">|</span><span class="token operator">|</span>++<span class="token punctuation">..</span>+  * <span class="token keyword">.</span> <span class="token keyword">.</span>     <span class="token operator">|</span><span class="token operator">|</span>Eo<span class="token punctuation">..</span>      <span class="token keyword">.</span>      <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+</code></pre><blockquote><p>-t rsa 表示使用的加密类型。生成过程可以输入一些信息，简单起见，全部回车即可<br>生成完毕后，目录中应该存在相应文件了。</p></blockquote><h3 id="告知GitHub公钥"><a href="#告知GitHub公钥" class="headerlink" title="告知GitHub公钥"></a>告知GitHub公钥</h3><p>在GitHub的用户设置中，找到ssh key的设置：SSH Keys<br>点击 New SSH Key 新建</p><p>将生成的公钥id_rsa.pub内容拷贝到输入框中，起名标志即可。</p><p>保存即可。此时GitHub已经和我们本地电脑建立的信任关系。我们就可以将内容发布到GitHub上了。</p><p>###部署到GitHub<br>回到我们本地的博客项目中，hexo对于基于git的部署提供了一个工具hexo-deployer-git，我们直接安装使即可。</p><p>安装 hexo-deployer-git</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><h3 id="修改博客的部署配置"><a href="#修改博客的部署配置" class="headerlink" title="修改博客的部署配置"></a>修改博客的部署配置</h3><p>需要指定部署类型，版本库地址，分支，消息等信息</p><pre class=" language-bash"><code class="language-bash">/_config.ymldeploy:  type: <span class="token function">git</span>  repo: https://github.com/yourusername/yourusername.github.io  branch: master</code></pre><p>###执行部署<br>部署的过程，是将本地博客先生成静态文件，然后将静态文件发布到指定的版本库中。<br>因此总的过程应该是，清理之前的静态文件，生成新静态文件，发布到版本库 这个步骤，执行下面的代码即可：</p><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo deploy</code></pre><blockquote><p>部署deploy时会自动生成，因此可以省略 $ hexo generate 操作。<br>第一次部署的过程中，会出现要求输入GitHub账号信息的步骤，请输入即可：</p></blockquote><p>等等过后，如果出现 Deploy done，类似的信息，说明部署完成。</p><p>也可以去版本库中查看是否已经存在代码了，版本库地址就是：<a href="https://github.com/yourusername/yourusername.github.io" target="_blank" rel="noopener">https://github.com/yourusername/yourusername.github.io</a></p><p>部署完毕，就可以在 <code>yourusername.github.io</code> 看到你的博客了。</p><h2 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h2><p> 完成以上部署后，博客完毕。写作流程就是，本地编辑md文件，本地预览ok后，发布到github即可！<br>写作过程，请参考：Hexo文档。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/14/hello-world/"/>
      <url>/2018/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
